<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bot Reports - Admin Panel</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #2196f3;
            --success-color: #4caf50;
            --warning-color: #f57c00;
            --danger-color: #f44336;
            --gray-100: #f5f5f5;
            --gray-200: #eeeeee;
            --gray-300: #e0e0e0;
            --gray-400: #bdbdbd;
            --gray-500: #9e9e9e;
            --gray-600: #757575;
            --gray-700: #616161;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            background-color: var(--gray-100);
            color: var(--gray-700);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 24px;
            color: var(--gray-700);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .stat-card-title {
            color: var(--gray-500);
            font-size: 14px;
            margin-bottom: 8px;
        }

        .stat-card-value {
            font-size: 24px;
            font-weight: bold;
            color: var(--gray-700);
        }

        .filters {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .filter-select {
            padding: 8px 12px;
            border: 1px solid var(--gray-300);
            border-radius: 4px;
            background-color: white;
            min-width: 150px;
        }

        .reports-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .reports-table {
            width: 100%;
            border-collapse: collapse;
        }

        .reports-table th,
        .reports-table td {
            padding: 12px 16px;
            text-align: left;
            border-bottom: 1px solid var(--gray-200);
        }

        .reports-table th {
            background-color: var(--gray-100);
            font-weight: 600;
            color: var(--gray-600);
        }

        .reports-table tr:hover {
            background-color: var(--gray-50);
        }

        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
            text-transform: uppercase;
        }

        .status-pending {
            background-color: #fff3e0;
            color: var(--warning-color);
        }

        .status-investigating {
            background-color: #e3f2fd;
            color: var(--primary-color);
        }

        .status-resolved {
            background-color: #e8f5e9;
            color: var(--success-color);
        }

        .action-buttons {
            display: flex;
            gap: 8px;
        }

        .btn {
            padding: 6px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.2s;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-success {
            background-color: var(--success-color);
            color: white;
        }

        .btn:hover {
            opacity: 0.9;
        }

        .pagination {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            border-top: 1px solid var(--gray-200);
        }

        .pagination-info {
            color: var(--gray-600);
            font-size: 14px;
        }

        .pagination-controls {
            display: flex;
            gap: 8px;
        }

        .report-details-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 1000;
        }

        .modal-content {
            position: relative;
            background-color: white;
            margin: 10% auto;
            padding: 20px;
            width: 90%;
            max-width: 600px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .close-modal {
            position: absolute;
            top: 20px;
            right: 20px;
            font-size: 24px;
            cursor: pointer;
            color: var(--gray-500);
        }

        .report-details-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
            margin-top: 20px;
        }

        .report-detail {
            margin-bottom: 16px;
        }

        .report-detail-label {
            font-size: 12px;
            color: var(--gray-500);
            margin-bottom: 4px;
        }

        .report-detail-value {
            font-size: 14px;
            color: var(--gray-700);
        }

        @media (max-width: 768px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }

            .reports-container {
                overflow-x: auto;
            }

            .report-details-grid {
                grid-template-columns: 1fr;
            }
        }

         /* Add styles for notifications */
         .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 4px;
            color: white;
            z-index: 1000;
            animation: slideIn 0.3s ease-out;
        }

        .notification-success {
            background-color: var(--success-color);
        }

        .notification-error {
            background-color: var(--danger-color);
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Bot Reports Management</h1>
            <button class="btn btn-primary">
                <i class="fas fa-download"></i> Export Reports
            </button>
        </div>
        <div class="stat-card">
            <div class="stat-card-title">Total Reports</div>
            <div class="stat-card-value"><%= totalReports || 0 %></div> <!-- Default to 0 if undefined -->
        </div>
        <div class="stat-card">
            <div class="stat-card-title">Pending Reports</div>
            <div class="stat-card-value"><%= pendingReports || 0 %></div> <!-- Default to 0 if undefined -->
        </div>
        <div class="stat-card">
            <div class="stat-card-title">Resolved Today</div>
            <div class="stat-card-value"><%= resolvedToday || 0 %></div> <!-- Default to 0 if undefined -->
        </div>
        <div class="stat-card">
            <div class="stat-card-title">Average Response Time</div>
            <div class="stat-card-value"><%= avgResponseTime || 'N/A' %></div> <!-- Default to 'N/A' if undefined -->
        </div>
        

        <div class="filters">
            <select class="filter-select" id="statusFilter">
                <option value="">All Statuses</option>
                <option value="pending">Pending</option>
                <option value="investigating">Investigating</option>
                <option value="resolved">Resolved</option>
            </select>
            <select class="filter-select" id="typeFilter">
                <option value="">All Types</option>
                <option value="malfunction">Malfunction</option>
                <option value="inappropriate">Inappropriate Content</option>
                <option value="spam">Spam</option>
                <option value="other">Other</option>
            </select>
            <input type="date" class="filter-select" id="dateFilter">
        </div>

        <div class="reports-container">
            <table class="reports-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Bot Name</th>
                        <th>Reporter</th>
                        <th>Type</th>
                        <th>Status</th>
                        <th>Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% reports.forEach(function(report) { %>
                    <tr>
                        <td>#<%= report.id %></td>
                        <td><%= report.bot_name %></td>
                        <td><%= report.reporter_name %></td>
                        <td><%= report.report_type %></td>
                        <td>
                            <span class="status-badge status-<%= report.status %>">
                                <%= report.status %>
                            </span>
                        </td>
                        <td><%= report.created_at %></td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn btn-primary" onclick="viewReport('<%= report.id %>')">View</button>
                                <button class="btn btn-success" onclick="updateStatus('<%= report.id %>')">Update Status</button>
                            </div>
                        </td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>

            <div class="pagination">
                <div class="pagination-info">
                    Showing <%= (currentPage - 1) * 10 + 1 %> to <%= Math.min(currentPage * 10, totalReports) %> of <%= totalReports %> reports
                </div>
                <div class="pagination-controls">
                    <% if (currentPage > 1) { %>
                        <a href="?page=<%= currentPage - 1 %>" class="btn btn-primary">Previous</a>
                    <% } %>
                    <% for(let i = 1; i <= totalPages; i++) { %>
                        <a href="?page=<%= i %>" class="btn <%= currentPage === i ? 'btn-primary' : '' %>"><%= i %></a>
                    <% } %>
                    <% if (currentPage < totalPages) { %>
                        <a href="?page=<%= currentPage + 1 %>" class="btn btn-primary">Next</a>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <!-- Report Details Modal -->
    <div id="reportDetailsModal" class="report-details-modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeReportModal()">&times;</span>
            <h2>Report Details</h2>
            <div class="report-details-grid">
                <div class="report-detail">
                    <div class="report-detail-label">Report ID</div>
                    <div class="report-detail-value" id="modalReportId"></div>
                </div>
                <div class="report-detail">
                    <div class="report-detail-label">Bot Name</div>
                    <div class="report-detail-value" id="modalBotName"></div>
                </div>
                <div class="report-detail">
                    <div class="report-detail-label">Reporter</div>
                    <div class="report-detail-value" id="modalReporter"></div>
                </div>
                <div class="report-detail">
                    <div class="report-detail-label">Report Type</div>
                    <div class="report-detail-value" id="modalReportType"></div>
                </div>
                <div class="report-detail">
                    <div class="report-detail-label">Status</div>
                    <div class="report-detail-value" id="modalStatus"></div>
                </div>
                <div class="report-detail">
                    <div class="report-detail-label">Date Reported</div>
                    <div class="report-detail-value" id="modalDate"></div>
                </div>
            </div>
            <div class="report-detail" style="grid-column: 1 / -1;">
                <div class="report-detail-label">Description</div>
                <div class="report-detail-value" id="modalDescription"></div>
            </div>
            <div class="action-buttons" style="margin-top: 20px;">
                <button class="btn btn-primary" onclick="updateStatus(currentReportId)">Update Status</button>
                <button class="btn btn-success" onclick="markAsResolved(currentReportId)">Mark as Resolved</button>
            </div>
        </div>
    </div>

 <script>
       let currentReportId = null;

// Fetch report details and show modal
// Fetch report details and show modal
async function viewReport(reportId) {
    try {
        const response = await fetch(`/api/admin/report/${reportId}`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const report = await response.json();
        
        currentReportId = reportId;
        document.getElementById('modalReportId').textContent = `#${report.id}`;
        document.getElementById('modalBotName').textContent = report.bot_name;
        document.getElementById('modalReporter').textContent = report.reporter_name;
        document.getElementById('modalReportType').textContent = report.report_type;
        document.getElementById('modalStatus').textContent = report.status;
        document.getElementById('modalDate').textContent = report.created_at;
        document.getElementById('modalDescription').textContent = report.description || 'No description provided';
        
        document.getElementById('reportDetailsModal').style.display = 'block';
    } catch (error) {
        console.error('Error fetching report details:', error);
        showNotification('Failed to load report details', 'error');
    }
}

// Add error handling to the notification system
function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}
function closeReportModal() {
    document.getElementById('reportDetailsModal').style.display = 'none';
    currentReportId = null;
}

// Update report status
async function updateStatus(reportId) {
    try {
        const newStatus = prompt('Enter new status (pending/investigating/resolved):').toLowerCase();
        if (!['pending', 'investigating', 'resolved'].includes(newStatus)) {
            showNotification('Invalid status', 'error');
            return;
        }

        const response = await fetch('/api/admin/update-report', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                reportId,
                status: newStatus
            })
        });

        if (response.ok) {
            showNotification('Status updated successfully', 'success');
            // Refresh the page to show updated data
            location.reload();
        } else {
            const data = await response.json();
            throw new Error(data.error);
        }
    } catch (error) {
        console.error('Error updating status:', error);
        showNotification(error.message || 'Failed to update status', 'error');
    }
}

// Mark report as resolved
async function markAsResolved(reportId) {
    try {
        const response = await fetch('/api/admin/update-report', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                reportId,
                status: 'resolved'
            })
        });

        if (response.ok) {
            showNotification('Report marked as resolved', 'success');
            location.reload();
        } else {
            const data = await response.json();
            throw new Error(data.error);
        }
    } catch (error) {
        console.error('Error resolving report:', error);
        showNotification(error.message || 'Failed to resolve report', 'error');
    }
}

// Handle filters
function applyFilters() {
    const status = document.getElementById('statusFilter').value;
    const type = document.getElementById('typeFilter').value;
    const date = document.getElementById('dateFilter').value;
    
    let url = new URL(window.location);
    if (status) url.searchParams.set('status', status);
    if (type) url.searchParams.set('type', type);
    if (date) url.searchParams.set('date', date);
    
    window.location.href = url.toString();
}

// Add event listeners for filters
document.getElementById('statusFilter').addEventListener('change', applyFilters);
document.getElementById('typeFilter').addEventListener('change', applyFilters);
document.getElementById('dateFilter').addEventListener('change', applyFilters);

// Export reports
async function exportReports() {
    try {
        const response = await fetch('/api/admin/export-reports');
        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'bot-reports.csv';
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } else {
            throw new Error('Failed to export reports');
        }
    } catch (error) {
        console.error('Error exporting reports:', error);
        showNotification('Failed to export reports', 'error');
    }
}

// Close modal when clicking outside
window.onclick = function(event) {
    const modal = document.getElementById('reportDetailsModal');
    if (event.target === modal) {
        closeReportModal();
    }
}

// Initialize any filter values from URL params
function initializeFilters() {
    const params = new URLSearchParams(window.location.search);
    
    if (params.has('status')) {
        document.getElementById('statusFilter').value = params.get('status');
    }
    if (params.has('type')) {
        document.getElementById('typeFilter').value = params.get('type');
    }
    if (params.has('date')) {
        document.getElementById('dateFilter').value = params.get('date');
    }
}

// Call initialization function when page loads
document.addEventListener('DOMContentLoaded', initializeFilters);
 </script>

       </body>
       </html>